import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
sns.set_style("white")
np.random.seed(sum(map(ord, "palettes")))

n=2
def sinplot(flip=1):
    x = np.linspace(0, 14, 100)
    for i in range(1, 10):
        plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)
    plt.show()

#sns.palplot(sns.color_palette("Paired"))
#sns.palplot(sns.light_palette("#3498db",n_colors=n))

#sns.palplot(sns.light_palette("#e74c3c",n_colors=n))

#sns.palplot(sns.light_palette((210, 90, 60), input="husl"))

#sns.palplot(sns.light_palette("#2ecc71",n_colors=n))
# sns.palplot(sns.cubehelix_palette(9, start=2, rot=0, gamma=2.1, dark=0.6, light=.95))


#sns.palplot(sns.color_palette("Set2", 10))
#sns.set_palette("Set2",10)
#sinplot()


# show how to use transforms to create axes spans where a certain condition is satisfied
fig, ax = plt.subplots()
x = np.arange(-4, 4, 0.1)
y = np.sin(4*np.pi*x)
ax.plot(x, y, color='black')

import matplotlib.transforms as mtransforms
trans = mtransforms.blended_transform_factory(ax.transData, ax.transAxes)
theta = 0.5
#ax.axhline(theta, color='green', lw=2, alpha=0.5)
#ax.axhline(-theta, color='red', lw=2, alpha=0.5)
ax.fill_between(x, 0, 1, where=y > theta, facecolor='green', alpha=0.5, transform=trans)
#ax.fill_between(x, 0, 1, where=y < -theta, facecolor='red', alpha=0.5, transform=trans)

ax.fill_between(x[:], -1, 1, facecolor='grey')
ax.fill_between(x[-4:4], -3, 3, facecolor=sns.xkcd_rgb["silver"])
plt.show()
